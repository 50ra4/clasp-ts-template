# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches:
      - main
    types: [closed]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "preparation"
  preparation:
    name: Preparation
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')
    outputs:
      new_version: ${{ steps.get_the_versions.outputs.NEW_VERSION }}
      previous_version: ${{ steps.get_the_versions.outputs.PREVIOUS_VERSION }}
      latest_commit_hash: ${{ steps.get_the_versions.outputs.LATEST_COMMIT_HASH }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get the versions
        id: get_the_versions
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          NEW_VERSION=$(echo "$HEAD_REF" | awk -F "/" '{ print $2 }')
          PREVIOUS_VERSION=$(git tag --sort=-creatordate | sed -n 2p)
          LATEST_COMMIT_HASH=$(git rev-parse HEAD)
          echo ::set-output name=NEW_VERSION::$NEW_VERSION
          echo ::set-output name=PREVIOUS_VERSION::$PREVIOUS_VERSION
          echo ::set-output name=LATEST_COMMIT_HASH::$LATEST_COMMIT_HASH

  # This workflow contains a single job called "release"
  release:
    name: Create Release
    needs: [preparation]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v') && needs.preparation.outputs.new_version != needs.preparation.outputs.previous_version

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Get commit summary
      - name: Get Commit Summary
        id: get_commit_summary
        env:
          VERSION: ${{ needs.preparation.outputs.new_version }}
          LATEST_COMMIT_HASH: ${{ needs.preparation.outputs.latest_commit_hash }}
        run: |
          echo "PREVIOUS_TAG: $PREVIOUS_TAG, LATEST_COMMIT_HASH: $LATEST_COMMIT_HASH"
          COMMIT_SUMMARY="$(git log --oneline --pretty=tformat:"%h %s" $PREVIOUS_TAG..$LATEST_COMMIT_HASH)"
          COMMIT_SUMMARY="${COMMIT_SUMMARY//$'\n'/'%0A'}"
          echo ::set-output name=COMMIT_SUMMARY::$COMMIT_SUMMARY

      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.preparation.outputs.new_version }}
          release_name: Release ${{ needs.preparation.outputs.new_version }}
          body: |
            ${{ steps.get_commit_summary.outputs.COMMIT_SUMMARY }}
          draft: false
          prerelease: false

  # This workflow contains a single job called "deploy"
  deploy:
    name: Deploy GoogleAppScripts
    needs: [preparation, release]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')

    env:
      REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
      DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}

    # node version
    strategy:
      matrix:
        node-version: ["14.16"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Setup node
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Install npm packages
      - name: Install npm packages
        run: |
          npm install

      # Generate files for deploy clasp
      - name: Generate "~/.clasprc.json" & "~/.clasp.json"
        run: |
          npm run setup-clasp-files -- --CD

      # Deploy clasp
      - name: Deploy
        env:
          VERSION: ${{ needs.preparation.outputs.new_version }}
        run: |
          npm run build
          npx clasp push -f
          npx clasp version "Release $VERSION"
          NEW_VERSION_ID=$(npx clasp versions | sed -n 2p | awk '{ print $1 }')
          npx clasp deploy -i $DEPLOYMENT_ID -V $NEW_VERSION_ID -d "Production"
